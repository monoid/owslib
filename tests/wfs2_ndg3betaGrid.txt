
Imports and initialize

    >>> from owslib.wfs import WebFeatureService
    >>> wfs = WebFeatureService('http://ndg3beta.badc.rl.ac.uk/cows/demo_famous/wfs?', version='2.0.0')

Test the capabilities info

    >>> wfs.identification.service
    'OGC:WFS'
    >>> wfs.identification.version
    '2.0.0'
    >>> wfs.identification.title
    'CSML test server'
    >>> wfs.identification.abstract
    >>> wfs.identification.keywords
    ['Grid', 'Climate', 'CSML']
    >>> wfs.identification.fees
    >>> wfs.identification.accessconstraints
    >>> wfs.provider.name
    'British Atmospheric Data Centre'
    >>> wfs.provider.url
    >>> wfs.provider.contact.email
    'D.Lowe@rl.ac.uk'
    >>> wfs.provider.contact.name
    'Dominic Lowe'
    >>> wfs.provider.contact.organization
    >>> wfs.provider.contact.city
    'Didcot'
    >>> wfs.provider.contact.region
    'Oxfordshire'
    >>> wfs.provider.contact.postcode
    'OX11 0QX'
    >>> wfs.provider.contact.country
    'UK'
    
Test the getfeature method

    >>> wfs.contents.keys()
    ['csml:GridSeriesFeature']

    >>> response = wfs.getfeature(typename=['csml:GridSeriesFeature'], maxfeatures=2)
    >>> response.read().find('<wfs:member')>0
    True
	>>> response=wfs.getfeature(typename=['csml:GridSeriesFeature'],bbox=(-5,50,-4,60))
	>>> response.read().find('<wfs:member') >0
	True

Test Stored Queries
	>>> storedqid='urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractGridSeriesFromGridSeries'
	>>> sqparams={'featureid':'air_temperature','mintime':'2799-06-01T00:00:00.0','maxtime':'2803-06-01T00:00:00.0','bbox':'-180,-90,180,90'}
    >>> response=wfs.getfeature(typename=['csml:GridSeriesFeature'],storedQueryID=storedqid, storedQueryParams=sqparams)	
	>>> response.read().find('<wfs:member') >0
	True
	>>> for sq in wfs.storedqueries: print sq.id
	queryOne
	urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:phenomenonQuery
	urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractPointFromPointSeries
	urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractGridSeriesFromGridSeries
	urn-x:wfs:StoredQueryId:ISO:GetFeatureById
	>>> for sq in wfs.storedqueries: print sq.title
	test query
	SelectFeaturesByPhenomenon
	ExtractPointFromPointSeries
	ExtractGridSeriesFromGridSeries
	GetFeatureById
    >>> for sq in wfs.storedqueries: print sq.returnfeaturetype
    xyzml:SomeFeatureType
    csml:AbstractFeature
    csml:PointFeature
    csml:GridSeriesFeature
    csml:AbstractFeature
    >>> for sq in wfs.storedqueries: print sq.abstract
    my test query
    Select features based on their phenomenon type, e.g. "temperature"
    Extract a csml:PointFeature for a single time instance from a csml:PointSeriesFeature
    Extract a csml:GridSeries from a csml:GridSeriesFeature
    Get any feature by id
    >>> sq = wfs.storedqueries[3]
    >>> for param in sq.parameters: print "%s,  %s"%(param.name, param.type)
    featureid,  xsd:anyURI
    mintime,  gml:TimePositionUnion
    maxtime,  gml:TimePositionUnion
    bbox,  xsd:string
